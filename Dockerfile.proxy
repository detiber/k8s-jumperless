# Build the proxy binary
FROM golang:1.24 AS builder-proxy
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY utils/jumperless-emulator/go.mod utils/jumperless-emulator/go.mod
COPY utils/jumperless-emulator/go.sum utils/jumperless-emulator/go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN cd utils/jumperless-emulator && go mod download

COPY utils/jumperless-proxy/go.mod utils/jumperless-proxy/go.mod
COPY utils/jumperless-proxy/go.sum utils/jumperless-proxy/go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN cd utils/jumperless-proxy && go mod download

# Copy the go source
COPY utils/jumperless-proxy/cmd/ utils/jumperless-proxy/cmd/
COPY utils/jumperless-emulator/emulator/ utils/jumperless-emulator/emulator/
COPY utils/jumperless-proxy/proxy/ utils/jumperless-proxy/proxy/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN cd utils/jumperless-proxy && CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o jumperless-proxy ./cmd

# Use distroless as minimal base image to package the proxy binary
# Refer to https://github.com/GoogleContainerTools/distroless for more details
FROM gcr.io/distroless/static:nonroot
WORKDIR /
COPY --from=builder-proxy /workspace/utils/jumperless-proxy/jumperless-proxy .
USER 65532:65532

ENTRYPOINT ["/jumperless-proxy"]
