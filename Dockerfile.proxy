# Build the proxy binary
FROM golang:1.25 AS builder-proxy
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace

# Copy the main Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the emulator Go Modules manifests
COPY utils/emulator/go.mod utils/emulator/go.mod
COPY utils/emulator/go.sum utils/emulator/go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN cd utils/emulator && go mod download

# Copy the proxy Go Modules manifests
COPY utils/proxy/go.mod utils/proxy/go.mod
COPY utils/proxy/go.sum utils/proxy/go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN cd utils/proxy && go mod download

# Copy the go source
COPY jumperless/ jumperless/
COPY utils/proxy/cmd/ utils/proxy/cmd/
COPY utils/emulator/emulator/ utils/emulator/emulator/
COPY utils/proxy/proxy/ utils/proxy/proxy/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN cd utils/proxy && CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o ../../proxy ./cmd

# Use distroless as minimal base image to package the proxy binary
# Refer to https://github.com/GoogleContainerTools/distroless for more details
FROM gcr.io/distroless/static:latest
WORKDIR /
COPY --from=builder-proxy /workspace/proxy .

ENTRYPOINT ["/proxy"]
