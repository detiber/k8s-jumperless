# Build the utils binary
FROM golang:1.25 AS builder-utils
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace

# Copy the base Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache base deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the utils Go Modules manifests
COPY utils/go.mod utils/go.mod
COPY utils/go.sum utils/go.sum
# cache utils deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN cd utils && go mod download

# Copy the go source
COPY jumperless/ jumperless/
COPY utils/cmd/ utils/cmd/
COPY utils/internal/ utils/internal/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN cd utils && CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o ../jumperless-utils ./cmd

# Use distroless as minimal base image to package the utils binary
# Refer to https://github.com/GoogleContainerTools/distroless for more details
FROM gcr.io/distroless/static:latest
WORKDIR /
COPY --from=builder-utils /workspace/jumperless-utils .

ENTRYPOINT ["/jumperless-utils"]
